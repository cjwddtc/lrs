//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: player_list.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "player_list.h"


void pl_panel::set_status(size_t index,bool is_dead)
{
	if (is_dead)
	{
		pannels[index]->SetArtProvider(redpro);
	}
	else
	{
		pannels[index]->SetArtProvider(defaulp);
	}
}

pl_panel::pl_panel(wxRibbonPage* left_page_, wxRibbonPage* right_page_, size_t size):
	left_page(left_page_), right_page(right_page_),
	pannels(size)
{
	defaulp = new wxRibbonDefaultArtProvider();
	redpro = new wxRibbonDefaultArtProvider();
	redpro->SetColourScheme(*wxRED, *wxRED, *wxRED);
	int index = 0;
	for (personpanel *&a : pannels)
	{
		a = new personpanel(index < size / 2 ?  left_page : right_page,index);
		++index;
	}
	left_page_->Realise();
	right_page_->Realise();
}

pl_panel::~pl_panel()
{
}
#include <wx/frame.h>
extern wxFrame *mf;
personpanel::personpanel(wxWindow *parent,int index):wxRibbonPanel(parent,-1,wxString::Format("%dºÅ",index+1),wxNullBitmap,wxDefaultPosition, wxSize(80, 80)),m_index(index)
{
	tc = nullptr;
	this->Bind(wxEVT_LEFT_DCLICK, [this](wxMouseEvent &ev) {
		auto po=ev.GetPosition();
		ClientToScreen(&po.x, &po.y);
		mf->ScreenToClient(&po.x, &po.y);
		if (tc == nullptr) {
			tc = new wxTextCtrl(mf,-1);
		}
		tc->SetPosition(po);
		tc->Show(true);
		tc->SetFocus();
		auto func= [this](auto ev) {
			tc->GetValue();
			SetLabel(wxString::Format("%dºÅ %s", m_index + 1, tc->GetValue().mb_str()));
			tc->Show(false);
			mf->Refresh();
		};
		tc->Bind(wxEVT_KILL_FOCUS, func);
		tc->Bind(wxEVT_TEXT_ENTER, func);
		tc->Refresh();
		printf("asd\n");
	});
	bar = new wxRibbonButtonBar(this, -1, wxDefaultPosition);
}

int count = 12345;
void personpanel::add(std::string name,std::function<void()> func)
{
	bar->AddButton(count, name, wxNullBitmap, name, wxRIBBON_BUTTON_NORMAL);
	buttonmap[name] = count;
	bar->Bind(wxEVT_RIBBONBUTTONBAR_CLICKED, [func](auto a) {func(); }, count++);
}

void personpanel::remove(std::string name)
{
	bar->DeleteButton(buttonmap[name]);
}
